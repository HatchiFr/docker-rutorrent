#!/usr/bin/env sh

## var color
CSI="\033["
CEND="${CSI}0m"
CRED="${CSI}1;31m"
CGREEN="${CSI}1;32m"
CYELLOW="${CSI}1;33m"
CBLUE="${CSI}1;34m"

# Functions
f_log() {
  LOG_TYPE=$1
  LOG_MESSAGE=$2

  case "${LOG_TYPE}" in
    "INF")
      echo -e "${CBLUE}[$(date +%Y/%m/%d-%H:%M:%S)] ${LOG_MESSAGE}${CEND}"
    ;;
    "SUC")
      echo -e "${CGREEN}[$(date +%Y/%m/%d-%H:%M:%S)] ${LOG_MESSAGE}${CEND}"
    ;;
    "WRN")
      echo -e "${CYELLOW}[$(date +%Y/%m/%d-%H:%M:%S)] ${LOG_MESSAGE}${CEND}"
    ;;
    "ERR")
      echo -e "${CRED}[$(date +%Y/%m/%d-%H:%M:%S)] ${LOG_MESSAGE}${CEND}"
    ;;
  esac
}

# Create user torrent
f_log INF "Create user torrent ..."

if [ "$(grep ':'${GID}':' /etc/group)" == "" ]; then
  addgroup -g ${GID} torrent
fi

if [ "$(grep ${UID} /etc/passwd)" == "" ]; then
  adduser -h /home/torrent -s /bin/sh -G torrent -D -u ${UID} torrent
fi

f_log SUC "Create user torrent done"

# Create require folder
mkdir -p \
  /data/.watch \
  /data/.session \
  /data/downloads \
  /config/filebot \
  /config/rtorrent \
  /config/rutorrent \
  /config/custom_themes \
  /config/custom_plugins

# Generate configuration
f_log INF "Generate configuration ..."

if [ "${WEBROOT}" != "/" ]; then
  PATH_RUTORRENT="/rutorrent/app${WEBROOT}"
  INITPLUGINS="/rutorrent/app${WEBROOT}/php/initplugins.php"
  mkdir -p "${PATH_RUTORRENT}"
  mv /rutorrent/app/* "${PATH_RUTORRENT}"
else
  PATH_RUTORRENT="/rutorrent/app"
  INITPLUGINS="/rutorrent/app/php/initplugins.php"
fi

sed -i 's|<initplugins>|'${INITPLUGINS}'|g' /home/torrent/.rtorrent.rc
sed -i 's|<webroot>|'${WEBROOT}'|g' /etc/nginx/nginx.conf
sed -i 's|//|/|g' /etc/nginx/nginx.conf

# Externalize rutorrent configuration
if [ -d /config/rutorrent/conf ]; then
  rm -rf "${PATH_RUTORRENT}/conf"
  ln -s /config/rutorrent/conf "${PATH_RUTORRENT}/conf"
else
  mv "${PATH_RUTORRENT}/conf" /config/rutorrent
  ln -s /config/rutorrent/conf "${PATH_RUTORRENT}/conf"
fi

# Externalize rutorrent share
if [ -d /config/rutorrent/share ]; then
  rm -rf "${PATH_RUTORRENT}/share"
  ln -s /config/rutorrent/share "${PATH_RUTORRENT}/share"
else
  mv "${PATH_RUTORRENT}/share" /config/rutorrent
  ln -s /config/rutorrent/share "${PATH_RUTORRENT}/share"
fi

# Add custom plugins
[ "$(ls /config/custom_plugins)" ] && for custom_plugin in $(ls /config/custom_plugins); do
  if [ ! -d "${PATH_RUTORRENT}/plugins/${custom_plugin}" ]; then
    ln -s "/config/custom_plugins/${custom_plugin}" "${PATH_RUTORRENT}/plugins/${custom_plugin}"
  fi
done

# Add custom themes
[ "$(ls /config/custom_themes)" ] && for custom_theme in $(ls /config/custom_themes); do
  if [ ! -d "${PATH_RUTORRENT}/plugins/theme/themes/${custom_theme}" ]; then
    ln -s "/config/custom_themes/${custom_theme}" "${PATH_RUTORRENT}/plugins/theme/themes/${custom_theme}"
  fi
done

sed -i 's|<DHT_RTORRENT>|'${DHT_RTORRENT}'|g' /home/torrent/.rtorrent.rc
sed -i 's|<PORT_RTORRENT>|'${PORT_RTORRENT}'|g' /home/torrent/.rtorrent.rc

# externalize rtorrent configuration
if [ -e /config/rtorrent/.rtorrent.rc ]; then
  cp /config/rtorrent/.rtorrent.rc /home/torrent/.rtorrent.rc
else
  cp /home/torrent/.rtorrent.rc /config/rtorrent/.rtorrent.rc
fi

f_log SUC "Generate configuration done"

# Filebot
if [ -e /filebot ]; then
  f_log INF "Configuration of filebot ..."
  mkdir -p /data/media/movies /data/media/series /data/media/animes /data/media/music

  # Add license file
  if [ -e ${FILEBOT_LICENSE} ]; then
    /filebot/filebot.sh --license ${FILEBOT_LICENSE}
  else
    f_log ERR "The filebot license file doesn't exist"
  fi

  grep -E "method.set_key.*event.download.finished" /home/torrent/.rtorrent.rc > /dev/null 2>&1
  [ $? -ne 0 ] && echo 'method.set_key = event.download.finished,filebot,"execute2=/usr/local/bin/postdl,$d.directory=,$d.name=,$d.custom1="' >> /home/torrent/.rtorrent.rc

  grep -E "method.set_key.*event.download.erased" /home/torrent/.rtorrent.rc > /dev/null 2>&1
  [ $? -ne 0 ] && echo 'method.set_key = event.download.erased,filebot_cleaner,"execute2=/usr/local/bin/postrm"' >> /home/torrent/.rtorrent.rc

  find /filebot ! -uid ${UID} -exec chown ${UID}:${GID} {} \;
  chmod +x /usr/local/bin/postdl /usr/local/bin/postrm
  f_log SUC "Configuration of filebot done"
fi

f_log INF "Apply system permissions ..."

for folder in /config /rutorrent /home/torrent /var/lib/nginx /var/tmp/nginx /var/log /etc/nginx /etc/php7 /tmp /etc/s6.d /data/.watch /run/rtorrent /run/nginx /run/php; do
  find "${folder}" ! -uid ${UID} -exec chown ${UID}:${GID} {} \;
done

find /etc/s6.d -type f -exec chmod +x {} \;

f_log SUC "Apply system permissions done"

if [ "${CHECK_PERM_DATA}" == "true" ]; then
  f_log INF "Apply data permissions ..."
  find /data ! -uid ${UID} -exec chown ${UID}:${GID} {} \;
  # fix chroot sftp
  chown root:root /data
  f_log SUC "Apply data permissions done"
fi

rm -f /data/.session/rtorrent.lock

# Run !
exec su-exec ${UID}:${GID} $@
